# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  desc "Load ASC API Key information to use in subsequent lanes"
  # Use Credentials from ENV, see https://github.com/fastlane/fastlane/blob/master/fastlane/lib/fastlane/actions/app_store_connect_api_key.rb#L22
  lane :load_asc_api_key do
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'],
      issuer_id:ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_API_KEY_KEY'],
      is_key_content_base64: ENV['APP_STORE_CONNECT_API_KEY_IS_KEY_CONTENT_BASE64'],
      in_house: false # detecting this via ASC private key not currently supported
    )
  end

  desc "Bump build number based on most recent TestFlight build number"
  lane :fetch_and_increment_build_number do
   #fetch read your app identifier defined in your Appfile
   app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
   api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

   current_version = get_version_number(
     xcodeproj: "ios/App/App.xcodeproj",
     target: "App"
   )
   latest_build_number = latest_testflight_build_number(
     api_key: api_key,
     version: current_version,
     app_identifier: app_identifier
   )
   increment_build_number(
     xcodeproj: "ios/App/App.xcodeproj",
     build_number: (latest_build_number + 1),
   )
  end

  desc "Generate iconset"
  lane :icons do
    appicon(
      appicon_image_file: 'fastlane/metadata/app_icon.png',
      appicon_devices: %i[ipad iphone ios_marketing],
      appicon_path: "ios/App/App/Assets.xcassets",
   )
  end

  desc "Generate new localized screenshots"
  lane :screenshots do
    capture_screenshots(workspace: "App.xcworkspace", scheme: "App")
    frame_screenshots()
    upload_to_app_store(skip_binary_upload: true, skip_metadata: true)
  end

  desc "Check certs and profiles"
  lane :prepare_signing do |options|
   app_id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
   api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

   profile_name = "David Gey"

   cert(
       api_key: api_key,
       keychain_path: ENV["KEYCHAIN_PATH"] # the path to the keychain where your certificates are stored
     )

   # main app profile
   sigh(
     api_key: api_key,
     app_identifier: app_id,
     provisioning_name: profile_name,
     force: true # always recreate this exact profile to ensure it's valid and not expired
   )
  end

  desc "Build the iOS app for release"
  lane :build_release do |options|
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    profile_name = "David Gey"
    output_name = "rESCueApp-iOS"
    export_method = "app-store"
    compile_bitcode = true

    # turn off automatic signing during build so correct code signing identity is guaranteed to be used
    update_code_signing_settings(
      path: "ios/App/App.xcodeproj",
      use_automatic_signing: false,
      targets: ["App"], # specify which targets to update code signing settings for
      code_sign_identity: "Apple Distribution", # replace with name of code signing identity if different
      bundle_identifier: app_identifier,
      profile_name: profile_name,
      build_configurations: ["Release"] # only toggle code signing settings for Release configurations
    )

    # build the app
    gym(
      workspace: "ios/App/App.xcworkspace",
      scheme: "App",
      output_name: output_name,
      configuration: "Release",
      export_options: {
        method: export_method,
        provisioningProfiles: {
          app_identifier => profile_name
        },
        compileBitcode: compile_bitcode
     }
   )
  end

  desc "Build a new beta release"
  lane :beta do
    load_asc_api_key
    update_info_plist( # Advanced processing: find URL scheme for particular key and replace value
      xcodeproj: "ios/App/App.xcodeproj",
      plist_path: "App/Info.plist",
      block: proc do |plist|
        plist["ITSAppUsesNonExemptEncryption "]               = false
        plist["NSLocationWhenInUseUsageDescription"]          = "This App uses your location to allow tracking your route on a map."
        plist["NSLocationAlwaysUsageDescription"]             = "This App uses your location to allow tracking your route on a map."
        plist["NSLocationAlwaysAndWhenInUseUsageDescription"] = "This App uses your location to allow tracking your route on a map."
        plist["NSBluetoothPeripheralUsageDescription"]        = "This App uses Bluetooth to connect to your rESCue device via BLE."
        plist["NSBluetoothAlwaysUsageDescription"]            = "This App uses Bluetooth / BLE even when the App is in background to keep connected to your rESCue device."
      end
    )
    icons
    fetch_and_increment_build_number
    prepare_signing
    build_release
    upload_to_testflight
  end
end

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new internal Build"
  lane :internal do

    previous_build_number = google_play_track_version_codes(
      package_name: "org.thankthemaker.rescueapp",
      track: "internal",
      json_key_data: ENV["GOOGLE_PLAY_STORE_API_KEY_JSON"]
    )[0]

    current_build_number = previous_build_number + 1

    increment_version_code(
      gradle_file_path: "android/app/build.gradle",
      version_code: current_build_number
    )
    gradle(
          project_dir: "android",
          task: "assemble",
          build_type: "Release",
          print_command: false,
          properties: {
            "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_FILE"],
            "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
            "android.injected.signing.key.alias" => ENV["ANDROID_KEYSTORE_ALIAS"],
            "android.injected.signing.key.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
            })
    upload_to_play_store(
                         package_name: "org.thankthemaker.rescueapp",
                         track: "internal",
                         release_status: "draft",
                         apk: "android/app/build/outputs/apk/release/app-release.apk",
                         skip_upload_metadata: true,
                         skip_upload_images: true,
                         skip_upload_screenshots: true,
                         json_key_data: ENV["GOOGLE_PLAY_STORE_API_KEY_JSON"]
                         )
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
